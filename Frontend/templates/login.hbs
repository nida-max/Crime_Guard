<!DOCTYPE html>
<html>
<head><meta charset="utf-8">
    
    <title>LoginPage</title>
<meta name="viewport" content="width=device-width, initial-scale=1">
<link rel="stylesheet" href="css/login.css" />
</head>
<body>
  <header class="header">
    <nav class="nav-items">
        <div class="logo-container">
            <img src="/pic/h.png" class="logo" />
        </div>
        <h5>CRIME GUARD</h5>



         <div class="ab">
            <a href="/home">Home </a>
            <a href="/about">About</a>
           <a href="/report" >Report</a>
            <a href="/contactus">Contact</a>
            <a href="/signup">Registeration</a>
            </div>
    </nav>
</header>


<div>
  
  <form class="modal-content animate" is="loginform" action="/login" method="POST">
    <div class="heading-container">
      
      <div class="heading">Login</div>
    </div>

    <div class="container">
      <label for="email"><b>Email</b></label>
      <input type="text" placeholder="Enter Email" id="email" name="email" pattern="[a-z0-9._%+-]+@[a-z0-9.-]+\.[a-z]{2,}$" required>
      <div> <span id="emailError" style="color: red; display: none;">Please enter a valid email address</span></div>
      <label for="psw"><b>Password</b></label>
      <input type="password" placeholder="Enter Password" id="password" name="password" minlength="6" required>
        <br><br>
      <input class="button2" type="submit"><br></div><br><br><br>
      <label>
        <input type="checkbox" checked="checked" id="check"  name="remember"> Remember me
      </label>
      <span class="psw">Forgot <a href="#">password?</a></pan>
    </div>
  </form>
</div>


    <div class="bouncing-blobs-container">
        <div class="bouncing-blobs-glass"></div>
        <div class="bouncing-blobs">
            <div class="bouncing-blob bouncing-blob--blue"></div>
            <div class="bouncing-blob bouncing-blob--blue"></div>
            <div class="bouncing-blob bouncing-blob--blue"></div>
            <div class="bouncing-blob bouncing-blob--white"></div>
            <div class="bouncing-blob bouncing-blob--purple"></div>
            <div class="bouncing-blob bouncing-blob--purple"></div>
            <div class="bouncing-blob bouncing-blob--pink"></div>
        </div>
    </div>
   
    <script>
        const MIN_SPEED = 1.5
        const MAX_SPEED = 2.5

        function randomNumber(min, max) {
            return Math.random() * (max - min) + min
        }

        class Blob {
            constructor(el) {
                this.el = el
                const boundingRect = this.el.getBoundingClientRect()
                this.size = boundingRect.width
                this.initialX = randomNumber(0, window.innerWidth - this.size)
                this.initialY = randomNumber(0, window.innerHeight - this.size)
                this.el.style.top = `${this.initialY}px`
                this.el.style.left = `${this.initialX}px`
                this.vx =
                    randomNumber(MIN_SPEED, MAX_SPEED) * (Math.random() > 0.5 ? 1 : -1)
                this.vy =
                    randomNumber(MIN_SPEED, MAX_SPEED) * (Math.random() > 0.5 ? 1 : -1)
                this.x = this.initialX
                this.y = this.initialY
            }

            update() {
                this.x += this.vx
                this.y += this.vy
                if (this.x >= window.innerWidth - this.size) {
                    this.x = window.innerWidth - this.size
                    this.vx *= -1
                }
                if (this.y >= window.innerHeight - this.size) {
                    this.y = window.innerHeight - this.size
                    this.vy *= -1
                }
                if (this.x <= 0) {
                    this.x = 0
                    this.vx *= -1
                }
                if (this.y <= 0) {
                    this.y = 0
                    this.vy *= -1
                }
            }

            move() {
                this.el.style.transform = `translate(${this.x - this.initialX}px, ${this.y - this.initialY
                    }px)`
            }
        }

        function initBlobs() {
            const blobEls = document.querySelectorAll('.bouncing-blob')
            const blobs = Array.from(blobEls).map((blobEl) => new Blob(blobEl))

            function update() {
                requestAnimationFrame(update)
                blobs.forEach((blob) => {
                    blob.update()
                    blob.move()
                })
            }

            requestAnimationFrame(update)
        }

        initBlobs()

    </script>
   <script>
  document.addEventListener('DOMContentLoaded', function () {
    const loginForm = document.querySelector('.modal-content');
    loginForm.addEventListener('submit', function (event) {
      event.preventDefault(); // Prevent default form submission

      const formData = {
        email: document.querySelector('input[name="email"]').value,
        password: document.querySelector('input[name="password"]').value
      };

      fetch('/login', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(formData)
      })
      
      .then(response => {
    if (response.ok) {
        // Check if the email is equal to the specified email
        const email = formData.email.toLowerCase(); // Convert email to lowercase for case-insensitive comparison
        if (email === "nidatariq865@gmail.com") {
            // Redirect to the dashboard page
            window.location.href = '/dashboard';
        } else {
            // Redirect to the report page
            window.location.href = '/report';
        }
    } else {
        return response.json();
    }
})
      .then(data => {
        // Display popup notification with the error message
        alert(data.message);
      })
      .catch(error => {
        console.error('Error:', error);
      });
    });
  });
</script>

<script>
  document.addEventListener('DOMContentLoaded', function () {
    const emailInput = document.getElementById('email');
    const emailError = document.getElementById('emailError');

    emailInput.addEventListener('input', function () {
      if (!validateEmail(emailInput.value)) {
        emailError.style.display = 'inline';
      } else {
        emailError.style.display = 'none';
      }
    });

    function validateEmail(email) {
      const regex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      return regex.test(email);
    }
  });
</script>






    
</body>
</html>
